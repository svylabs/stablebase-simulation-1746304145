{
  "sequence": [
    {
      "type": "deploy",
      "contract": "ChainlinkPriceFeed",
      "constructor": "constructor(uint256 chainId) { if (chainId == 1) { // Ethereum Mainnet priceFeed = AggregatorV3Interface( 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419 ); } else if (chainId == 11155111) { // Sepolia Testnet priceFeed = AggregatorV3Interface( 0x694AA1769357215DE4FAC081bf1f309aDC325306 ); } else if (chainId == 5) { // Goerli Testnet (if needed) priceFeed = AggregatorV3Interface( 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e ); } else { revert(\"Unsupported chain ID\"); } }",
      "function": "",
      "ref_name": "chainlinkPriceFeed",
      "params": [
        {
          "name": "chainId",
          "value": "11155111",
          "type": "val"
        }
      ]
    },
    {
      "type": "deploy",
      "contract": "Constants",
      "constructor": "null",
      "function": "",
      "ref_name": "constants",
      "params": []
    },
    {
      "type": "deploy",
      "contract": "DFIDToken",
      "constructor": "constructor() Ownable(msg.sender) ERC20(\"D.FI Dollar\", \"DFID\") {}",
      "function": "",
      "ref_name": "dfidToken",
      "params": []
    },
    {
      "type": "deploy",
      "contract": "DFIREToken",
      "constructor": "constructor() Ownable(msg.sender) ERC20(\"D.FIRE\", \"DFIRE\") { Initializes the contract, setting the deployer as the owner and initializing the ERC20 token with the name \"D.FIRE\" and symbol \"DFIRE\". }",
      "function": "",
      "ref_name": "dfireToken",
      "params": []
    },
    {
      "type": "deploy",
      "contract": "DFIREStaking",
      "constructor": "constructor(bool _rewardSenderActive) Ownable(msg.sender) {\n        rewardSenderActive = _rewardSenderActive;\n    }",
      "function": "",
      "ref_name": "dfireStaking",
      "params": [
        {
          "name": "_rewardSenderActive",
          "value": "true",
          "type": "val"
        }
      ]
    },
    {
      "type": "deploy",
      "contract": "StabilityPool",
      "constructor": "constructor(bool _rewardSenderActive) Ownable(msg.sender) {\n        rewardSenderActive = _rewardSenderActive;\n    }",
      "function": "",
      "ref_name": "stabilityPool",
      "params": [
        {
          "name": "_rewardSenderActive",
          "value": "true",
          "type": "val"
        }
      ]
    },
    {
      "type": "deploy",
      "contract": "MockPriceOracle",
      "constructor": "constructor() Ownable(msg.sender) {}",
      "function": "",
      "ref_name": "mockPriceOracle",
      "params": []
    },
    {
      "type": "deploy",
      "contract": "StableBase",
      "constructor": "constructor() Ownable(msg.sender) ERC721(\"StableBase Safe\", \"SBSafe\") {}",
      "function": "",
      "ref_name": "stableBase",
      "params": []
    },
    {
      "type": "deploy",
      "contract": "StableBaseCDP",
      "constructor": "constructor() StableBase() {}",
      "function": "",
      "ref_name": "stableBaseCDP",
      "params": []
    },
    {
      "type": "deploy",
      "contract": "OrderedDoublyLinkedList",
      "constructor": "constructor() Ownable(msg.sender) {\n        head = 0;\n        tail = 0;\n    }",
      "function": "",
      "ref_name": "liquidationQueue",
      "params": []
    },
    {
      "type": "deploy",
      "contract": "OrderedDoublyLinkedList",
      "constructor": "constructor() Ownable(msg.sender) {\n        head = 0;\n        tail = 0;\n    }",
      "function": "",
      "ref_name": "redemptionQueue",
      "params": []
    },
    {
      "type": "call",
      "contract": "DFIDToken",
      "constructor": "",
      "function": "setAddresses",
      "ref_name": "dfidToken",
      "params": [
        {
          "name": "_stableBaseCDP",
          "value": "stableBaseCDP",
          "type": "ref"
        }
      ]
    },
    {
      "type": "call",
      "contract": "DFIREToken",
      "constructor": "",
      "function": "setAddresses",
      "ref_name": "dfireToken",
      "params": [
        {
          "name": "_stabilityPool",
          "value": "stabilityPool",
          "type": "ref"
        }
      ]
    },
    {
      "type": "call",
      "contract": "DFIREStaking",
      "constructor": "",
      "function": "setAddresses",
      "ref_name": "dfireStaking",
      "params": [
        {
          "name": "_stakingToken",
          "value": "dfireToken",
          "type": "ref"
        },
        {
          "name": "_rewardToken",
          "value": "dfidToken",
          "type": "ref"
        },
        {
          "name": "_stableBaseContract",
          "value": "stableBaseCDP",
          "type": "ref"
        }
      ]
    },
    {
      "type": "call",
      "contract": "StabilityPool",
      "constructor": "",
      "function": "setAddresses",
      "ref_name": "stabilityPool",
      "params": [
        {
          "name": "_stakingToken",
          "value": "dfidToken",
          "type": "ref"
        },
        {
          "name": "_stableBaseCDP",
          "value": "stableBaseCDP",
          "type": "ref"
        },
        {
          "name": "_sbrToken",
          "value": "dfireToken",
          "type": "ref"
        }
      ]
    },
    {
      "type": "call",
      "contract": "StableBase",
      "constructor": "",
      "function": "setAddresses",
      "ref_name": "stableBase",
      "params": [
        {
          "name": "_sbdToken",
          "value": "dfidToken",
          "type": "ref"
        },
        {
          "name": "_priceOracle",
          "value": "chainlinkPriceFeed",
          "type": "ref"
        },
        {
          "name": "_stabilityPool",
          "value": "stabilityPool",
          "type": "ref"
        },
        {
          "name": "_dfireTokenStaking",
          "value": "dfireStaking",
          "type": "ref"
        },
        {
          "name": "_safesOrderedForLiquidation",
          "value": "liquidationQueue",
          "type": "ref"
        },
        {
          "name": "_safesOrderedForRedemption",
          "value": "redemptionQueue",
          "type": "ref"
        }
      ]
    },
    {
      "type": "call",
      "contract": "OrderedDoublyLinkedList",
      "constructor": "",
      "function": "setAddresses",
      "ref_name": "liquidationQueue",
      "params": [
        {
          "name": "_stableBaseCDP",
          "value": "stableBaseCDP",
          "type": "ref"
        }
      ]
    },
    {
      "type": "call",
      "contract": "OrderedDoublyLinkedList",
      "constructor": "",
      "function": "setAddresses",
      "ref_name": "redemptionQueue",
      "params": [
        {
          "name": "_stableBaseCDP",
          "value": "stableBaseCDP",
          "type": "ref"
        }
      ]
    }
  ]
}